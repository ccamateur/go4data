// Package {{.PackageName}} is generated by actiongenerator tooling
// Make sure to insert real Description here
package {{.PackageName}}


import (
    "fmt"
	"github.com/perbol/workflow/payload"
	"github.com/perbol/workflow/property"
	"github.com/perbol/workflow/register"

)

// {{.ActionName}} is used to $INSERT DESCRIPTION
type {{.ActionName}} struct{
	// Cfg is values needed to properly run the Handle func
	Cfg *property.Configuration `json:"configs" yaml:"configs"`
	// Name is sort of like an ID used to load data back should be the same that is used to register the action
	Name string
	// subscriptionless should be set to true if this action does not need any input payloads to function
	subscriptionless bool
}

func init() {
	register.Register("{{.ActionName}}", New{{.ActionName}}Action())
}

// New{{.ActionName}}Action generates a new {{.ActionName}} action
func New{{.ActionName}}Action() *{{.ActionName}} {
	act := &{{.ActionName}}{
		Cfg: &property.Configuration{
			Properties: make([]*property.Property, 0),
		},
		Name: {{.ActionName}},
	}
	act.Cfg.AddProperty("test", "the configuratiosn you need", true)
	return act
}

// Handle is used to $INSERT DESCRIPTION HERE
func (a *{{.ActionName}}) Handle(input payload.Payload) ([]payload.Payload,error) {
	fmt.Println(input)
	output := make([]payload.Payload, 0)
	output = append(output, input)
	return output,nil
}

// ValidateConfiguration is used to see that all needed configurations are assigned before starting
func (a *{{.ActionName}}) ValidateConfiguration() (bool, []string) {
	// Check if Cfgs are there as needed
	valid, miss := a.Cfg.ValidateProperties()
	if !valid {
		return valid, miss
	}
	return true, nil
}

// GetConfiguration will return the CFG for the action
func (a *{{.ActionName}}) GetConfiguration() *property.Configuration {
	return a.Cfg
}

// Subscriptionless will return true/false if the action is genereating payloads itself
func (a *{{.ActionName}}) Subscriptionless() bool {
	return a.subscriptionless
}

